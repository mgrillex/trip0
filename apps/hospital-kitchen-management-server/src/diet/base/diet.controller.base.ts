/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DietService } from "../diet.service";
import { DietCreateInput } from "./DietCreateInput";
import { Diet } from "./Diet";
import { DietFindManyArgs } from "./DietFindManyArgs";
import { DietWhereUniqueInput } from "./DietWhereUniqueInput";
import { DietUpdateInput } from "./DietUpdateInput";

export class DietControllerBase {
  constructor(protected readonly service: DietService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Diet })
  async createDiet(@common.Body() data: DietCreateInput): Promise<Diet> {
    return await this.service.createDiet({
      data: data,
      select: {
        availableMeals: true,
        createdAt: true,
        dietCode: true,
        dietName: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Diet] })
  @ApiNestedQuery(DietFindManyArgs)
  async diets(@common.Req() request: Request): Promise<Diet[]> {
    const args = plainToClass(DietFindManyArgs, request.query);
    return this.service.diets({
      ...args,
      select: {
        availableMeals: true,
        createdAt: true,
        dietCode: true,
        dietName: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Diet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async diet(
    @common.Param() params: DietWhereUniqueInput
  ): Promise<Diet | null> {
    const result = await this.service.diet({
      where: params,
      select: {
        availableMeals: true,
        createdAt: true,
        dietCode: true,
        dietName: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Diet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDiet(
    @common.Param() params: DietWhereUniqueInput,
    @common.Body() data: DietUpdateInput
  ): Promise<Diet | null> {
    try {
      return await this.service.updateDiet({
        where: params,
        data: data,
        select: {
          availableMeals: true,
          createdAt: true,
          dietCode: true,
          dietName: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Diet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDiet(
    @common.Param() params: DietWhereUniqueInput
  ): Promise<Diet | null> {
    try {
      return await this.service.deleteDiet({
        where: params,
        select: {
          availableMeals: true,
          createdAt: true,
          dietCode: true,
          dietName: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
