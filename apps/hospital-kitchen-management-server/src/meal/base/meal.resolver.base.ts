/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Meal } from "./Meal";
import { MealCountArgs } from "./MealCountArgs";
import { MealFindManyArgs } from "./MealFindManyArgs";
import { MealFindUniqueArgs } from "./MealFindUniqueArgs";
import { CreateMealArgs } from "./CreateMealArgs";
import { UpdateMealArgs } from "./UpdateMealArgs";
import { DeleteMealArgs } from "./DeleteMealArgs";
import { Department } from "../../department/base/Department";
import { MealService } from "../meal.service";
@graphql.Resolver(() => Meal)
export class MealResolverBase {
  constructor(protected readonly service: MealService) {}

  async _mealsMeta(
    @graphql.Args() args: MealCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Meal])
  async meals(@graphql.Args() args: MealFindManyArgs): Promise<Meal[]> {
    return this.service.meals(args);
  }

  @graphql.Query(() => Meal, { nullable: true })
  async meal(@graphql.Args() args: MealFindUniqueArgs): Promise<Meal | null> {
    const result = await this.service.meal(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Meal)
  async createMeal(@graphql.Args() args: CreateMealArgs): Promise<Meal> {
    return await this.service.createMeal({
      ...args,
      data: {
        ...args.data,

        department: args.data.department
          ? {
              connect: args.data.department,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Meal)
  async updateMeal(@graphql.Args() args: UpdateMealArgs): Promise<Meal | null> {
    try {
      return await this.service.updateMeal({
        ...args,
        data: {
          ...args.data,

          department: args.data.department
            ? {
                connect: args.data.department,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Meal)
  async deleteMeal(@graphql.Args() args: DeleteMealArgs): Promise<Meal | null> {
    try {
      return await this.service.deleteMeal(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Department, {
    nullable: true,
    name: "department",
  })
  async getDepartment(
    @graphql.Parent() parent: Meal
  ): Promise<Department | null> {
    const result = await this.service.getDepartment(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
